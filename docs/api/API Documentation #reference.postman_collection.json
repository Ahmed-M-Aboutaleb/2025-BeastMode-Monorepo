{
	"info": {
		"_postman_id": "1412bcce-8725-401a-b4cd-1db629870591",
		"name": "API Documentation #reference",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36422882"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('_id', 'email', 'isActive', 'roles', 'profile', 'passwordHash', 'createdAt', 'updatedAt', '__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.exist;\r",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Profile contains valid firstName and lastName as non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.profile).to.exist.and.to.be.an('object');\r",
									"    \r",
									"    pm.expect(responseData.profile.firstName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"firstName should not be empty\");\r",
									"    pm.expect(responseData.profile.lastName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"lastName should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"profile\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\",\r\n        \"sex\": \"Male\",\r\n        \"birthDate\": \"2004-05-12\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('totalItems', 'items', 'page', 'size');\r",
									"});\r",
									"\r",
									"pm.test(\"Items array is present and is an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.items).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// New validation test for required profile keys\r",
									"pm.test(\"Profile keys are present with valid non-empty string values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.items.forEach(item => {\r",
									"        pm.expect(item.profile.firstName).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(item.profile.lastName).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(item.profile.sex).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(item.profile.birthDate).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"createdAt and updatedAt are in valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    \r",
									"    responseData.items.forEach(item => {\r",
									"        pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?Z$/, \"createdAt is not in valid date format\");\r",
									"        pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?Z$/, \"updatedAt is not in valid date format\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/users?page=1&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('_id', 'email', 'isActive', 'roles', 'profile', 'passwordHash', 'createdAt', 'updatedAt', '__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('email').that.is.a('string').and.satisfies(email => {\r",
									"        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"        return emailRegex.test(email);\r",
									"    }, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the profile object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('profile').that.is.an('object');\r",
									"    pm.expect(responseData.profile).to.have.all.keys('firstName', 'lastName', 'sex', 'birthDate');\r",
									"    \r",
									"    pm.expect(responseData.profile.firstName).to.be.a('string');\r",
									"    pm.expect(responseData.profile.lastName).to.be.a('string');\r",
									"    pm.expect(responseData.profile.sex).to.be.a('string');\r",
									"    pm.expect(responseData.profile.birthDate).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "68b9b65d222a6596804c374e"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('_id', 'email', 'isActive', 'roles', 'profile', 'passwordHash', 'createdAt', 'updatedAt', '__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the profile object contains the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.profile).to.exist.and.to.be.an('object');\r",
									"    \r",
									"    const requiredFields = ['firstName', 'lastName', 'sex', 'birthDate'];\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(responseData.profile).to.have.property(field);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"iifire0056@gmail.com\",\r\n    \"password\": \"Test@125\",\r\n    \"profile\": {\r\n        \"firstName\": \"Ahmed\",\r\n        \"lastName\": \"Mohamed\",\r\n        \"sex\": \"Male\",\r\n        \"birthDate\": \"2004-05-12\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "68b9aff4cfec2663315adc83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('_id', 'email', 'isActive', 'roles', 'profile', 'passwordHash', 'createdAt', 'updatedAt', '__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Roles is an array and contains valid role values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('roles').that.is.an('array');\r",
									"    responseData.roles.forEach(role => {\r",
									"        pm.expect(role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role value should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Profile object contains required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.profile).to.exist;\r",
									"\r",
									"    const profileFields = ['firstName', 'lastName', 'sex', 'birthDate'];\r",
									"    profileFields.forEach(function(field) {\r",
									"        pm.expect(responseData.profile).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "68b9aff4cfec2663315adc83"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "The `/me` endpoints let you manage information about the authenticated user."
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the structure of the profile object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('profile').that.is.an('object');\r",
									"    \r",
									"    const profile = responseData.profile;\r",
									"    pm.expect(profile).to.have.all.keys('firstName', 'lastName', 'picture', 'bio', 'fitnessGoals', 'isPublic', 'sex', 'birthDate', 'bodyMeasurements');\r",
									"    \r",
									"    pm.expect(profile.firstName).to.be.a('string');\r",
									"    pm.expect(profile.lastName).to.be.a('string');\r",
									"    pm.expect(profile.picture).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(profile.bio).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(profile.fitnessGoals).to.satisfy(value => value === null || Array.isArray(value));\r",
									"    pm.expect(profile.isPublic).to.satisfy(value => value === null || typeof value === 'boolean');\r",
									"    pm.expect(profile.sex).to.be.a('string');\r",
									"    pm.expect(profile.birthDate).to.satisfy(value => value === null || typeof value === 'string');\r",
									"    pm.expect(profile.bodyMeasurements).to.satisfy(value => value === null || typeof value === 'object');\r",
									"});\r",
									"\r",
									"pm.test(\"First name and last name must be non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.profile).to.exist.and.to.be.an('object');\r",
									"    \r",
									"    pm.expect(responseData.profile.firstName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
									"    pm.expect(responseData.profile.lastName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
									"});\r",
									"\r",
									"// Updated birth date test to check for ISO format\r",
									"pm.test(\"Birth date is in a valid ISO format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.profile).to.exist;\r",
									"    \r",
									"    const birthDate = responseData.profile.birthDate;\r",
									"    pm.expect(birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Birth date should be in ISO format 'YYYY-MM-DDTHH:mm:ss.sssZ'\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@example.com\",\r\n    \"password\": \"Password123_!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should contain access_token and profile properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('access_token');\r",
									"    pm.expect(responseData).to.have.property('profile');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Profile contains valid firstName and lastName as non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.profile).to.be.an('object').that.includes.keys('firstName', 'lastName');\r",
									"\r",
									"    pm.expect(responseData.profile.firstName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"firstName should not be empty\");\r",
									"    pm.expect(responseData.profile.lastName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"lastName should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"BirthDate is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('profile');\r",
									"    pm.expect(responseData.profile).to.have.property('birthDate');\r",
									"    \r",
									"    const birthDate = responseData.profile.birthDate;\r",
									"    pm.expect(birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Birth date should be in ISO format 'YYYY-MM-DDTHH:mm:ss.sssZ'\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@example.com\",\r\n    \"password\": \"Password123_!\",\r\n    \"profile\": {\r\n        \"firstName\": \"Ahmed\",\r\n        \"lastName\": \"Aboutaleb\",\r\n        \"sex\": \"Male\",\r\n        \"birthDate\": \"2004-05-12\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://farming-simulator.pstmn.io"
		}
	]
}